// Generated by CodiumAI

describe('getRates', () => {

});

    // Uses jQuery to make an AJAX request to the Coinlayer API.
    it('should make an AJAX request to the Coinlayer API', () => {
      // Mock the jQuery ajax function
      jest.spyOn($, 'ajax').mockImplementation(() => Promise.resolve({
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150
        }
      }));

      // Call the getRates function
      getRates();

      // Expect the jQuery ajax function to be called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Expect the createCard function to be called with the correct parameters
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Expect the card elements to be appended to the cryptoList element
      expect($("#cryptoList").children().length).toBe(3);

      // Restore the original implementation of the jQuery ajax function
      $.ajax.mockRestore();
    });


    // Uses Object.entries() to iterate over the rates.
    it('should iterate over the rates using Object.entries()', () => {
      // Mock response object
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock createCard function
      const createCard = jest.fn();

      // Mock jQuery append function
      const appendMock = jest.fn();

      // Mock jQuery selector function
      const selectorMock = jest.fn(() => ({
        append: appendMock,
      }));

      // Mock jQuery ajax function
      const ajaxMock = jest.fn(() => Promise.resolve(response));

      // Mock jQuery ready function
      const readyMock = jest.fn((callback) => callback());

      // Mock jQuery function
      const jqueryMock = jest.fn(() => ({
        ready: readyMock,
        ajax: ajaxMock,
        each: jest.fn((callback) => {
          Object.entries(response.rates).forEach(([symbol, rate]) => {
            callback(symbol, rate);
          });
        }),
        append: appendMock,
      }));

      // Replace global jQuery with mock
      global.$ = jqueryMock;

      // Call the getRates function
      getRates();

      // Assertions
      expect(ajaxMock).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });
      expect(createCard).toHaveBeenCalledTimes(3);
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);
      expect(appendMock).toHaveBeenCalledTimes(3);
    });


    // Uses async/await to handle the AJAX request.
    it('should retrieve live cryptocurrency rates from the Coinlayer API and display them on the webpage', async () => {
      // Mock the AJAX request
      const mockResponse = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };
      jest.spyOn($, 'ajax').mockResolvedValue(mockResponse);

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Call the getRates function
      await getRates();

      // Verify that the AJAX request was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the cards were appended to the cryptoList element
      expect($("#cryptoList").html()).toContain(createCard("BTC", 50000));
      expect($("#cryptoList").html()).toContain(createCard("ETH", 2000));
      expect($("#cryptoList").html()).toContain(createCard("LTC", 150));
    });


    // Appends each card to the
    it('should append each card to the cryptoList', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Mock the jQuery function
      const $ = jest.fn(() => cryptoList);

      // Call the getRates function
      getRates();

      // Verify that the jQuery function was called with the correct selector
      expect($).toHaveBeenCalledWith("#cryptoList");

      // Verify that the $.ajax function was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called for each rate
      expect(createCard).toHaveBeenCalledTimes(3);
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the append function was called for each card
      expect(appendMock).toHaveBeenCalledTimes(3);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
    });


    // Uses a helper function createCard() to create each card.
    it('should create a card for each cryptocurrency rate', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Call the getRates function
      getRates();

      // Check if the API request is made correctly
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Resolve the API request with the mock response
      $.ajax.mock.calls[0][0].success(response);

      // Check if the createCard function is called for each rate
      expect(createCard).toHaveBeenCalledTimes(3);
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Check if the cards are appended to cryptoList
      expect(appendMock).toHaveBeenCalledTimes(3);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
    });


    // Handles network errors and throws them.
    it('should throw an error when there is a network error', async () => {
      // Mock the ajax function to simulate a network error
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.reject(new Error('Network error'));
      });

      // Call the getRates function and expect it to throw an error
      await expect(getRates()).rejects.toThrow('Network error');

      // Restore the original implementation of the ajax function
      $.ajax.mockRestore();
    });


    // Throws an error if the response is invalid.
    it('should throw an error when the response is invalid', () => {
      // Mock the ajax request to return an invalid response
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: false,
        });
      });

      // Call the getRates function and expect it to throw an error
      expect(getRates()).rejects.toThrow('Invalid response');

      // Restore the original implementation of $.ajax
      $.ajax.mockRestore();
    });


    // Retrieves live cryptocurrency rates from the Coinlayer API and displays them on the webpage.
    it('should retrieve live cryptocurrency rates and display them on the webpage', async () => {
      // Mock the ajax request
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: true,
          rates: {
            BTC: 50000,
            ETH: 2000,
            LTC: 150
          }
        });
      });

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function
      const append = jest.fn();

      // Mock the cryptoList element
      const cryptoList = {
        append: append
      };

      // Mock the jQuery selector
      jest.spyOn(window, '$').mockImplementation(() => {
        return cryptoList;
      });

      // Call the getRates function
      await getRates();

      // Verify that the ajax request was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Verify that the append function was called with the correct parameters
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
    });


    // Displays rates for BTC, ETH, and LTC.
    it('should display rates for BTC, ETH, and LTC', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Mock the jQuery function
      const $ = jest.fn(() => cryptoList);

      // Call the getRates function
      getRates();

      // Verify that the jQuery function was called with the correct URL and data
      expect($.mock.calls[0][0]).toBe("https://api.coinlayer.com/api/live");
      expect($.mock.calls[0][1]).toEqual({
        access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
        target: "USD",
        symbols: "BTC,ETH,LTC",
      });
  
      // Resolve the promise with the mock response
      $.mock.calls[0][2].success(response);

      // Verify that the createCard function was called with the correct symbol and rate
      expect(createCard.mock.calls[0][0]).toBe("BTC");
      expect(createCard.mock.calls[0][1]).toBe(50000);
      expect(createCard.mock.calls[1][0]).toBe("ETH");
      expect(createCard.mock.calls[1][1]).toBe(2000);
      expect(createCard.mock.calls[2][0]).toBe("LTC");
      expect(createCard.mock.calls[2][1]).toBe(150);

      // Verify that the append function was called with the correct card
      expect(appendMock.mock.calls[0][0]).toBe(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock.mock.calls[1][0]).toBe(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock.mock.calls[2][0]).toBe(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
    });


    // Creates a card for each cryptocurrency with its symbol and rate.
    it('should create a card for each cryptocurrency with its symbol and rate', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Mock the jQuery function
      const $ = jest.fn(() => cryptoList);

      // Call the getRates function
      getRates();

      // Verify that the jQuery function was called with the correct selector
      expect($).toHaveBeenCalledWith("#cryptoList");

      // Verify that the $.ajax function was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called for each cryptocurrency
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the append function was called for each card
      expect(appendMock).toHaveBeenCalledTimes(3);

      // Verify that the cards were appended in the correct order
      expect(appendMock.mock.calls[0][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">BTC</h5><p class="card-text">Rate: 50000</p></div></div>'
      );
      expect(appendMock.mock.calls[1][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">ETH</h5><p class="card-text">Rate: 2000</p></div></div>'
      );
      expect(appendMock.mock.calls[2][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">LTC</h5><p class="card-text">Rate: 150</p></div></div>'
      );
    });


    // Throws an error if the response is invalid.
    it('should throw an error when the response is invalid', () => {
      // Mock the ajax request to return an invalid response
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: false
        });
      });

      // Call the getRates function and expect it to throw an error
      expect(getRates()).rejects.toThrow('Invalid response');

      // Restore the original implementation of $.ajax
      $.ajax.mockRestore();
    });


    // Retrieves live cryptocurrency rates from the Coinlayer API and displays them on the webpage.
    it('should retrieve live cryptocurrency rates and display them on the webpage', async () => {
      // Mock the ajax request
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: true,
          rates: {
            BTC: 50000,
            ETH: 2000,
            LTC: 150
          }
        });
      });

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the cryptoList element
      const cryptoList = $('<div id="cryptoList"></div>');

      // Call the getRates function
      await getRates();

      // Check if the ajax request was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Check if the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Check if the cryptoList element contains the correct cards
      expect(cryptoList.html()).toContain('<div class="col-md-4">');
      expect(cryptoList.html()).toContain('<h5 class="card-title">BTC</h5>');
      expect(cryptoList.html()).toContain('<p class="card-text">Rate: 50000</p>');
      expect(cryptoList.html()).toContain('<h5 class="card-title">ETH</h5>');
      expect(cryptoList.html()).toContain('<p class="card-text">Rate: 2000</p>');
      expect(cryptoList.html()).toContain('<h5 class="card-title">LTC</h5>');
      expect(cryptoList.html()).toContain('<p class="card-text">Rate: 150</p>');
    });


    // Successfully retrieves live cryptocurrency rates from the Coinlayer API
    it('should successfully retrieve live cryptocurrency rates from the Coinlayer API', async () => {
      // Mock the ajax request
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: true,
          rates: {
            BTC: 50000,
            ETH: 2000,
            LTC: 150
          }
        });
      });

      // Mock the createCard function
      const createCard = jest.fn();

      // Call the getRates function
      await getRates();

      // Verify that the ajax request was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Verify that the cards were appended to the cryptoList element
      expect($('#cryptoList').children().length).toBe(3);

      // Restore the original implementations
      $.ajax.mockRestore();
    });


    // Displays the rates on the webpage
    it('should display the rates on the webpage', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the jQuery append function
      const appendMock = jest.fn();

      // Mock the jQuery selector function
      const selectorMock = jest.fn(() => ({
        append: appendMock,
      }));

      // Mock the jQuery ajax function
      const ajaxMock = jest.fn(() => Promise.resolve(response));

      // Replace the original functions with the mock functions
      window.$ = jest.fn(() => ({
        ready: jest.fn((callback) => callback()),
        ajax: ajaxMock,
      }));
      window.$('#cryptoList') = selectorMock;

      // Call the getRates function
      getRates();

      // Verify that the jQuery ajax function was called with the correct parameters
      expect(ajaxMock).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the jQuery selector function was called with the correct parameter
      expect(selectorMock).toHaveBeenCalledWith('#cryptoList');

      // Verify that the jQuery append function was called with the correct parameter
      expect(appendMock).toHaveBeenCalledTimes(3);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
    });


    // Creates a card for each cryptocurrency with its symbol and rate
    it('should create a card for each cryptocurrency with its symbol and rate', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Mock the jQuery function
      const $ = jest.fn(() => cryptoList);

      // Call the getRates function
      getRates();

      // Verify that the jQuery function was called with the correct argument
      expect($).toHaveBeenCalledWith("#cryptoList");

      // Verify that the $.ajax function was called with the correct arguments
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called for each cryptocurrency
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the append function was called for each card
      expect(appendMock).toHaveBeenCalledTimes(3);

      // Verify that the cards were appended in the correct order
      expect(appendMock.mock.calls[0][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">BTC</h5><p class="card-text">Rate: 50000</p></div></div>'
      );
      expect(appendMock.mock.calls[1][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">ETH</h5><p class="card-text">Rate: 2000</p></div></div>'
      );
      expect(appendMock.mock.calls[2][0]).toBe(
        '<div class="col-md-4"><div class="card-body"><h5 class="card-title">LTC</h5><p class="card-text">Rate: 150</p></div></div>'
      );
    });


    // Appends each card to the cryptoList element on the webpage
    it('should append each card to the cryptoList element on the webpage when getRates is called', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the jQuery append function
      const appendMock = jest.fn();

      // Mock the jQuery ajax function
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve(response);
      });

      // Mock the jQuery selector function
      jest.spyOn($.fn, 'append').mockImplementation(appendMock);

      // Call the getRates function
      return getRates().then(() => {
        // Verify that the createCard function is called for each rate
        expect(createCard).toHaveBeenCalledTimes(3);
        expect(createCard).toHaveBeenCalledWith('BTC', 50000);
        expect(createCard).toHaveBeenCalledWith('ETH', 2000);
        expect(createCard).toHaveBeenCalledWith('LTC', 150);

        // Verify that the append function is called for each card
        expect(appendMock).toHaveBeenCalledTimes(3);

        // Verify that the cards are appended to the cryptoList element
        expect(appendMock.mock.calls[0][0]).toContain('BTC');
        expect(appendMock.mock.calls[1][0]).toContain('ETH');
        expect(appendMock.mock.calls[2][0]).toContain('LTC');
      });
    });


    // Invalid response from the Coinlayer API
    it('should throw an error and log it to the console', async () => {
      const consoleErrorSpy = jest.spyOn(console, 'error');
      const expectedError = new Error('Invalid response');

      // Mock the AJAX request to return an invalid response
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: false
        });
      });

      try {
        await getRates();
      } catch (error) {
        expect(error).toEqual(expectedError);
        expect(consoleErrorSpy).toHaveBeenCalledWith(expectedError);
      }

      // Restore the original implementation of $.ajax
      $.ajax.mockRestore();
    });


    // Missing or incorrect access key
    it('should throw an error when the access key is missing or incorrect', async () => {
      // Arrange
      const expectedError = new Error('Invalid response');

      // Act
      try {
        await getRates();
      } catch (error) {
        // Assert
        expect(error).toEqual(expectedError);
      }
    });


    // Missing or incorrect target currency
    it('should throw an error when the target currency is missing or incorrect', async () => {
      // Arrange
      const expectedError = new Error('Invalid response');

      // Act
      const promise = getRates();

      // Assert
      await expect(promise).rejects.toThrow(expectedError);
    });


    // Missing or incorrect symbols
    it('should throw an error when symbols are missing or incorrect', async () => {
      // Arrange
      const expectedError = new Error('Invalid response');

      // Act
      try {
        await getRates();
      } catch (error) {
        // Assert
        expect(error).toEqual(expectedError);
      }
    });


    // Empty response object
    it('should handle empty response object', async () => {
      const mockAjax = jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({});
      });

      try {
        await getRates();
      } catch (error) {
        expect(error).toEqual(new Error('Invalid response'));
      }

      expect(mockAjax).toHaveBeenCalledTimes(1);
      expect(mockAjax).toHaveBeenCalledWith({
        url: 'https://api.coinlayer.com/api/live',
        data: {
          access_key: '66c64bd1f72d4c380c6b473fdddcfa06',
          target: 'USD',
          symbols: 'BTC,ETH,LTC',
        },
        dataType: 'json',
      });

      mockAjax.mockRestore();
    });


    // Throws an error if the response is invalid
    it('should throw an error when the response is invalid', async () => {
      const mockResponse = {
        success: false,
        error: {
          code: 101,
          type: "invalid_access_key",
          info: "You have not supplied a valid API Access Key. [Technical Support: support@coinlayer.com]",
        },
      };

      jest.spyOn($, 'ajax').mockImplementation(() => Promise.resolve(mockResponse));

      try {
        await getRates();
      } catch (error) {
        expect(error).toEqual(new Error("Invalid response"));
      }
    });


    // Uses async/await to handle the AJAX request
    it('should retrieve live cryptocurrency rates from the Coinlayer API and display them on the webpage', async () => {
      // Mock the AJAX request
      const mockResponse = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };
      jest.spyOn($, 'ajax').mockResolvedValue(mockResponse);

      // Mock the createCard function
      const mockCreateCard = jest.fn();
      global.createCard = mockCreateCard;

      // Mock the cryptoList element
      const mockCryptoList = {
        append: jest.fn(),
      };
      global.$ = jest.fn().mockReturnValue(mockCryptoList);

      // Call the getRates function
      await getRates();

      // Verify that the AJAX request was made with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(mockCreateCard).toHaveBeenCalledWith("BTC", 50000);
      expect(mockCreateCard).toHaveBeenCalledWith("ETH", 2000);
      expect(mockCreateCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the createCard function was called the correct number of times
      expect(mockCreateCard).toHaveBeenCalledTimes(3);

      // Verify that the cryptoList element was appended with the correct cards
      expect(mockCryptoList.append).toHaveBeenCalledWith(mockCreateCard("BTC", 50000));
      expect(mockCryptoList.append).toHaveBeenCalledWith(mockCreateCard("ETH", 2000));
      expect(mockCryptoList.append).toHaveBeenCalledWith(mockCreateCard("LTC", 150));

      // Verify that the cryptoList element was appended the correct number of times
      expect(mockCryptoList.append).toHaveBeenCalledTimes(3);
    });


    // Uses a for...of loop to iterate through the rates object
    it('should iterate through the rates object and append cards to the cryptoList', () => {
      // Mock the response object
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function of cryptoList
      const appendMock = jest.fn();

      // Mock the jQuery selector for cryptoList
      const cryptoList = {
        append: appendMock,
      };

      // Mock the jQuery function
      const $ = jest.fn(() => cryptoList);

      // Call the getRates function
      getRates();

      // Verify that $.ajax is called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Simulate a successful response
      $.ajax.mock.calls[0][0].success(response);

      // Verify that createCard is called with the correct parameters and the correct number of times
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);
      expect(createCard).toHaveBeenCalledTimes(3);

      // Verify that append is called with the correct parameters and the correct number of times
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledTimes(3);
    });


    // Calls the createCard function to create a card for each cryptocurrency
    it('should call createCard function for each cryptocurrency', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn();

      // Mock the jQuery selector
      const cryptoList = {
        append: jest.fn(),
      };

      // Mock the jQuery ajax function
      jest.spyOn($, 'ajax').mockImplementation(() => Promise.resolve(response));

      // Call the getRates function
      return getRates().then(() => {
        // Expect the createCard function to be called for each cryptocurrency
        expect(createCard).toHaveBeenCalledTimes(3);
        expect(createCard).toHaveBeenCalledWith('BTC', 50000);
        expect(createCard).toHaveBeenCalledWith('ETH', 2000);
        expect(createCard).toHaveBeenCalledWith('LTC', 150);

        // Expect the cryptoList.append function to be called for each card
        expect(cryptoList.append).toHaveBeenCalledTimes(3);

        // Restore the original jQuery ajax function
        $.ajax.mockRestore();
      });
    });


    // Logs an error to the console if an error occurs during the AJAX request
    it('should log an error to the console when an error occurs during the AJAX request', () => {
      // Mock the console.error method
      console.error = jest.fn();

      // Mock the $.ajax method to throw an error
      jest.spyOn($, 'ajax').mockImplementation(() => {
        throw new Error('AJAX error');
      });

      // Call the getRates function
      getRates();

      // Expect console.error to have been called with the error message
      expect(console.error).toHaveBeenCalledWith(new Error('AJAX error'));
    });


    // API URL is correct
    it('should retrieve live cryptocurrency rates from the Coinlayer API and display them on the webpage', async () => {
      // Mock the ajax function
      const mockAjax = jest.fn().mockResolvedValue({
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      });
      $.ajax = mockAjax;

      // Mock the createCard function
      const mockCreateCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });
      window.createCard = mockCreateCard;

      // Call the getRates function
      await getRates();

      // Verify that the ajax function was called with the correct parameters
      expect(mockAjax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(mockCreateCard).toHaveBeenCalledWith("BTC", 50000);
      expect(mockCreateCard).toHaveBeenCalledWith("ETH", 2000);
      expect(mockCreateCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the cards were appended to the cryptoList element
      expect($("#cryptoList").html()).toContain(mockCreateCard("BTC", 50000));
      expect($("#cryptoList").html()).toContain(mockCreateCard("ETH", 2000));
      expect($("#cryptoList").html()).toContain(mockCreateCard("LTC", 150));
    });


    // cryptoList element is present on the webpage
    it('should display cryptocurrency rates on the webpage', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the jQuery append function
      const appendMock = jest.fn();

      // Mock the jQuery selector function
      const selectorMock = jest.fn(() => ({
        append: appendMock,
      }));

      // Mock the jQuery ajax function
      const ajaxMock = jest.fn(() => Promise.resolve(response));

      // Replace the original functions with the mock functions
      window.$ = jest.fn(() => ({
        ready: jest.fn((callback) => callback()),
        ajax: ajaxMock,
      }));
      window.$mock = window.$;
      window.$.fn = {};

      // Call the getRates function
      getRates();

      // Verify that the jQuery selector function was called with the correct argument
      expect(selectorMock).toHaveBeenCalledWith("#cryptoList");

      // Verify that the jQuery append function was called with the correct argument
      expect(appendMock).toHaveBeenCalledTimes(3);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);

      // Verify that the createCard function was called with the correct arguments
      expect(createCard).toHaveBeenCalledTimes(3);
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the jQuery ajax function was called with the correct arguments
      expect(ajaxMock).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });
    });


    // API access key is correct
    it('should retrieve live cryptocurrency rates from the Coinlayer API and display them on the webpage', async () => {
      // Mock the ajax request
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: true,
          rates: {
            BTC: 50000,
            ETH: 2000,
            LTC: 150
          }
        });
      });

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the append function
      const append = jest.fn();

      // Mock the cryptoList element
      const cryptoList = {
        append: append
      };

      // Mock the jQuery selector
      jest.spyOn(window, '$').mockImplementation(() => {
        return cryptoList;
      });

      // Call the getRates function
      await getRates();

      // Verify that the ajax request was called with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Verify that the append function was called with the correct parameters
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
      expect(append).toHaveBeenCalledWith('<div class="col-md-4">...</div>');
    });


    // API target currency is correct
    it('should retrieve live cryptocurrency rates from the Coinlayer API with the correct target currency', async () => {
      // Mock the ajax request
      jest.spyOn($, 'ajax').mockImplementation(() => {
        return Promise.resolve({
          success: true,
          rates: {
            BTC: 50000,
            ETH: 2000,
            LTC: 150
          }
        });
      });

      // Call the getRates function
      await getRates();

      // Verify that the ajax request was made with the correct parameters
      expect($.ajax).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function was called with the correct parameters
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the cards were appended to the cryptoList element
      expect($("#cryptoList").children().length).toBe(3);
    });


    // createCard function returns a valid card element
    it('should return a valid card element when createCard is called', () => {
      // Arrange
      const symbol = "BTC";
      const rate = 10000;

      // Act
      const card = createCard(symbol, rate);

      // Assert
      expect(card.hasClass("col-md-4")).toBe(true);
      expect(card.find(".card-body").length).toBe(1);
      expect(card.find(".card-title").text()).toBe(symbol);
      expect(card.text()).toContain(`Rate: ${rate}`);
    });


    // Displays rates on the webpage using createCard function
    it('should display rates on the webpage using createCard function', () => {
      // Mock the response from the API
      const response = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the createCard function
      const createCard = jest.fn((symbol, rate) => {
        return `<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">${symbol}</h5>
                    <p class="card-text">Rate: ${rate}</p>
                  </div>
                </div>`;
      });

      // Mock the jQuery append function
      const appendMock = jest.fn();

      // Mock the jQuery selector function
      const selectorMock = jest.fn(() => ({
        append: appendMock,
      }));

      // Mock the jQuery ajax function
      const ajaxMock = jest.fn(() => Promise.resolve(response));

      // Replace the original functions with the mock functions
      window.$ = jest.fn(() => ({
        ready: jest.fn((callback) => callback()),
        ajax: ajaxMock,
      }));
      window.$('#cryptoList') = selectorMock;

      // Call the getRates function
      getRates();

      // Verify that the jQuery ajax function is called with the correct parameters
      expect(ajaxMock).toHaveBeenCalledWith({
        url: "https://api.coinlayer.com/api/live",
        data: {
          access_key: "66c64bd1f72d4c380c6b473fdddcfa06",
          target: "USD",
          symbols: "BTC,ETH,LTC",
        },
        dataType: "json",
      });

      // Verify that the createCard function is called with the correct parameters
      expect(createCard).toHaveBeenCalledWith("BTC", 50000);
      expect(createCard).toHaveBeenCalledWith("ETH", 2000);
      expect(createCard).toHaveBeenCalledWith("LTC", 150);

      // Verify that the jQuery selector function is called with the correct parameter
      expect(selectorMock).toHaveBeenCalledWith('#cryptoList');

      // Verify that the jQuery append function is called with the correct parameter
      expect(appendMock).toHaveBeenCalledTimes(3);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">BTC</h5>
                    <p class="card-text">Rate: 50000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">ETH</h5>
                    <p class="card-text">Rate: 2000</p>
                  </div>
                </div>`);
      expect(appendMock).toHaveBeenCalledWith(`<div class="col-md-4">
                  <div class="card-body">
                    <h5 class="card-title">LTC</h5>
                    <p class="card-text">Rate: 150</p>
                  </div>
                </div>`);
    });


    // Successfully retrieves live cryptocurrency rates from Coinlayer API
    it('should successfully retrieve live cryptocurrency rates from Coinlayer API', async () => {
      // Mock the response from the API
      const mockResponse = {
        success: true,
        rates: {
          BTC: 50000,
          ETH: 2000,
          LTC: 150,
        },
      };

      // Mock the ajax function to return the mock response
      jest.spyOn($, 'ajax').mockImplementation(() => Promise.resolve(mockResponse));

      // Call the getRates function
      await getRates();

      // Verify that the createCard function is called with the correct arguments
      expect(createCard).toHaveBeenCalledWith('BTC', 50000);
      expect(createCard).toHaveBeenCalledWith('ETH', 2000);
      expect(createCard).toHaveBeenCalledWith('LTC', 150);

      // Verify that the cards are appended to the cryptoList element
      expect($('#cryptoList').children().length).toBe(3);

      // Restore the original implementation of the ajax function
      $.ajax.mockRestore();
    });

